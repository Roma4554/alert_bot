import os.path as path
from os import remove
from re import search

from aiogram import types
from asyncio import sleep
from asyncio import all_tasks, create_task
from aiogram.types import InputFile
from aiogram.dispatcher import FSMContext
from aiogram import Dispatcher
from aiogram.dispatcher.filters import Text

import db
from create_bot import bot
from decorators import check_permission
from keyboards import inline_cancel_keyboard, inline_save_notification_keyboard, inline_next_keyboard
from parser_xlsx import write_from_xlsx_to_db, write_from_db_to_xlsx
from classes import Notification, FsmAdmin
from hendlers.other import config, message_id_dict, notification_dict
from hendlers.other import admin_message_generator
from hendlers.other import auto_alert, cleaner, search_employee_id


time_pattern = r'([01]\d|2[0-3]):[0-5]\d(:[0-5]\d)?$'
date_pattern = r'^(?:0[1-9]|[12]\d|3[01])\.(?:0[1-9]|1[012])\.(?:[12]\d{3})$'
password_pattern = r'^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?!.*[\s#`~"\'\.\+\-\\\/\*$%‚Ññ@;:^&\*\=]).*$'


# ==========================–•–µ–ª–ø_–∞–¥–º–∏–Ω==================================================
@check_permission
async def help_admin(message: types.Message) -> None:
    """
    –•–µ–Ω–¥–µ–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help_admin
    """
    await message.answer(admin_message_generator(),
                         parse_mode=types.ParseMode.HTML)


# ==========================–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π==================================================
@check_permission
async def change_notification_time(message: types.Message, state: FSMContext) -> None:
    await message.answer('‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –∏–ª–∏ –ß–ß:–ú–ú:CC.',
                         reply_markup=inline_cancel_keyboard)
    await state.set_state(FsmAdmin.get_new_notification_time.state)


async def set_notification_time(message: types.Message, state: FSMContext) -> None:
    """
    –•–µ–Ω–¥–µ–ª–µ—Ä –∏–∑–º–µ–Ω—è—é—â–∏–π –≤—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if search(time_pattern, message.text):
        if len(message.text.split(':')) == 2:
            new_time = ':'.join([message.text, '00'])
        else:
            new_time = message.text
        config['DEFAULT']['notification_time'] = new_time
        config.write()
        await message.reply(f'‚úî <b>–í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è</b> —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ <u>{message.text}</u>!',
                            parse_mode=types.ParseMode.HTML)

        message_id_dict[message.from_user.id].append(message.message_id)
        await cleaner(message)
        await state.finish()

        for task in all_tasks():
            if task.get_name() == 'Auto_alert':
                task.cancel()
                create_task(auto_alert(), name='Auto_alert')
                break
    else:
        echo = await message.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
        message_id_dict[message.from_user.id].extend([echo.message_id, message.message_id])


# ==========================–ó–∞–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞==================================================
@check_permission
async def fire_admin(message: types.Message, state: FSMContext) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ <b>—Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä</b> –∏–ª–∏ <b>–∏–Ω–∏—Ü–∏–∞–ª—ã</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ '
        '–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!',
        reply_markup=inline_cancel_keyboard,
        parse_mode=types.ParseMode.HTML)
    await state.set_state(FsmAdmin.fire_admin_state.state)


async def set_fire_admin(message: types.Message, state: FSMContext) -> None:
    """
    –•–µ–Ω–¥–µ–ª–µ—Ä –æ—Ç–∑—ã–≤–∞—é—â–∏–π –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    try:
        employee_id = search_employee_id(message)

        if db.get_user_by_employee_id(employee_id).is_admin:
            db.fire_admin(employee_id)
            await message.answer('‚úî –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–æ–∑–≤–∞–Ω—ã!',
                                 parse_mode=types.ParseMode.HTML)
        else:
            await message.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!')

        await state.finish()
        await cleaner(message)
    except (KeyError, ValueError) as ex:
        argument = ex.args
        echo = await message.reply(*argument)
        message_id_dict[message.from_user.id].extend([message.message_id, echo.message_id])


# ==========================–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è=========================================================
@check_permission
async def change_password(message: types.Message, state: FSMContext) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    await message.answer('üîë <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å!</b>\
                         \n–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç—Ä–æ—á–Ω—ã–µ –∏ –ø—Ä–æ–ø–∏—Å–Ω—ã–µ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã',
                         reply_markup=inline_cancel_keyboard,
                         parse_mode=types.ParseMode.HTML)

    await state.set_state(FsmAdmin.change_password_state.state)


async def set_new_password(message: types.Message, state: FSMContext) -> None:
    """
    –•–µ–Ω–¥–µ–ª–µ—Ä —Å–æ—Ö—Ä–∞–Ω—è—é—â–∏–π –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """

    if search(password_pattern, message.text):
        config['topsecret']['admin_password'] = message.text
        config.write()
        await message.answer('‚úî –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!',
                             parse_mode=types.ParseMode.HTML)
        message_id_dict[message.from_user.id].append(message.message_id)
        await state.finish()
        await cleaner(message)
    else:
        echo = await message.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å.\
                                    \n–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç—Ä–æ—á–Ω—ã–µ –∏ –ø—Ä–æ–ø–∏—Å–Ω—ã–µ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã!')
        message_id_dict[message.from_user.id].extend([message.message_id, echo.message_id])


# ==========================–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤==================================================
@check_permission
async def get_admin_list(message: types.Message) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–º–µ—é—â–∏—Ö —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    pattern = '{num}) {user}; –¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: {employee_id}.'
    text_message = "üìú <b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>"
    for num, admin in enumerate(db.get_user_list(only_admin=True), start=1):
        text_message = '\n'.join([text_message, pattern.format(num=num,
                                                               user=admin.name,
                                                               employee_id=admin.employee_id)])
    await message.reply(text_message,
                        parse_mode=types.ParseMode.HTML)


# ==========================–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î –∏–∑ telegram==================================================
@check_permission
async def add_notification(message: types.Message, state: FSMContext) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    await message.reply('–í–≤–µ–¥–∏—Ç–µ <b>—Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –µ–≥–æ <b>–∏–Ω–∏—Ü–∏–∞–ª—ã</b> (–ò–≤–∞–Ω–æ–≤ –ò.–ò):',
                        reply_markup=inline_cancel_keyboard,
                        parse_mode=types.ParseMode.HTML)

    notification_dict[message.from_user.id] = list()
    await state.set_state(FsmAdmin.add_employee_id_state.state)


async def add_employee_id(message: types.Message, state: FSMContext) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä —Å–æ—Ö—Ä–∞–Ω—è—é—â–∏–π —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—â–∏–π –¥–∞—Ç—É –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:
    """
    if message.text.lower() == 'all':
        employees_id = db.get_employee_id_dict().keys()

        for employee_id in employees_id:
            set_notification_in_notification_dict(message, employee_id)

        echo = await message.reply('–î–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"</b>',
                                   reply_markup=inline_next_keyboard,
                                   parse_mode=types.ParseMode.HTML)
        message_id_dict[message.from_user.id].extend([message.message_id, echo.message_id])
        await state.finish()
        return

    try:
        employee_id = search_employee_id(message)
        set_notification_in_notification_dict(message, employee_id)
        echo = await message.reply('–î–æ–±–∞–≤—å—Ç–µ –µ—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"</b>',
                                   reply_markup=inline_next_keyboard,
                                   parse_mode=types.ParseMode.HTML)
    except (KeyError, ValueError) as ex:
        argument = ex.args
        echo = await message.reply(*argument)
    finally:
        message_id_dict[message.from_user.id].extend([message.message_id, echo.message_id])


def set_notification_in_notification_dict(message: types.Message, employee_id: int) -> None:
    notification = Notification()
    notification.employee_id = employee_id
    notification_dict[message.from_user.id].append(notification)


async def continue_call(callback: types.CallbackQuery, state: FSMContext) -> None:
    """
    –•–µ–Ω–¥–µ–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å".
    """
    if notification_dict.get(callback.from_user.id) is None:
        return

    await state.set_state(FsmAdmin.add_date_state.state)
    echo = await callback.message.reply('üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:',
                                        reply_markup=inline_cancel_keyboard,
                                        parse_mode=types.ParseMode.HTML)
    message_id_dict[callback.from_user.id].append(echo.message_id)


async def add_date(message: types.Message, state: FSMContext) -> None:
    """
    –•–µ–Ω–¥–µ–ª–µ—Ä —Å–æ—Ö—Ä–∞–Ω—è—é—â–∏–π –¥–∞—Ç—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—â–∏–π —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    """
    if search(date_pattern, message.text):
        split_text = message.text.split('.')[::-1]
        date = '.'.join(split_text)
        for note in notification_dict[message.from_user.id]:
            note.date = date
        await state.set_state(FsmAdmin.add_note_state.state)
        echo = await message.reply('üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:',
                                   reply_markup=inline_cancel_keyboard,
                                   parse_mode=types.ParseMode.HTML)
    else:
        echo = await message.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:')

    message_id_dict[message.from_user.id].extend([echo.message_id, message.message_id])


async def add_text(message: types.Message) -> None:
    """
    –•–µ–Ω–¥–µ–ª–µ—Ä –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    """
    notifications = notification_dict[message.from_user.id]
    for notification in notifications:
        notification.notification = message.html_text
    text_message = '–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç, –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!' \
                   '\n–î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–π –≤–µ—Ä—Å–∏–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"</b>\n' \
                   '\n<b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:</b>'
    text_message = '\n'.join([text_message, str(notifications[0])])
    message_id_dict[message.from_user.id].append(message.message_id)
    await cleaner(message)
    echo = await message.answer(text_message,
                                reply_markup=inline_save_notification_keyboard,
                                parse_mode=types.ParseMode.HTML)
    message_id_dict[message.from_user.id].append(echo.message_id)


# ==========================–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ë–î (–∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞)==================================================
async def save_call(callback: types.CallbackQuery, state: FSMContext) -> None:
    """
    –•–µ–Ω–¥–µ–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å".
    """
    await state.finish()
    notifications = map(tuple, notification_dict[callback.from_user.id])
    db.add_info_to_notification(notifications)
    await bot.edit_message_text(chat_id=callback.message.chat.id,
                                message_id=message_id_dict[callback.from_user.id].pop(),
                                parse_mode=types.ParseMode.HTML,
                                text='‚úî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>')


# ==========================–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î –∏–∑ exel==================================================
@check_permission
async def set_file(message: types.Message, state: FSMContext) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ñ–∞–π–ª–∞ exel —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    await message.reply('–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ exel —Ñ–∞–π–ª\n(–Ω–µ –±–æ–ª–µ–µ 20 –ú–±!)', reply_markup=inline_cancel_keyboard)
    await state.set_state(FsmAdmin.get_file_state.state)


async def save_file(message: types.Message, state: FSMContext) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ exel –≤ –ë–î
    –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π "*d" –∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–º—É —Ñ–∞–ª—É –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ—Ç—á–∏—Å—Ç–∏—Ç—å –ë–î
    """
    if message.document.mime_type == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":
        file_info = await bot.get_file(message.document.file_id)
        pth = path.join(path.curdir, 'documents', message.document.file_name)
        await bot.send_chat_action(message.chat.id, types.chat.ChatActions.UPLOAD_DOCUMENT)
        await bot.download_file(file_info.file_path, pth)
        await sleep(1)
        await message.reply('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\
                            \n–ó–∞–ø–∏—Å—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ –≤ –ë–î...')
        match message.caption:
            case str(message.caption) if message.caption.lower() == '*d':
                db.clean_table()
                await message.answer('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—Ç—á–∏—â–µ–Ω–∞!')
        status = write_from_xlsx_to_db(message.document.file_name)
        await message.reply(status)
        await cleaner(message)
        await state.finish()
        if path.isfile(pth):
            remove(pth)
    else:
        await if_not_document(message)


async def if_not_document(message: types.Message):
    echo = await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ exel —Ñ–∞–π–ª!')
    message_id_dict[message.from_user.id].extend([message.message_id, echo.message_id])


# ==========================–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ exel –∏–∑ –ë–î==================================================
@check_permission
async def get_file(message: types.Message) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä —Ñ–æ—Ä–º–∏—Ä—É—é—â–∏–π exel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∏–π –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    await message.reply('–§–æ—Ä–º–∏—Ä—É–µ–º xlsx —Ñ–∞–π–ª...')
    write_from_db_to_xlsx()
    pth = path.join(path.curdir, 'documents', 'DataBase.xlsx')
    fail = InputFile(pth)
    await bot.send_chat_action(message.chat.id, types.chat.ChatActions.UPLOAD_DOCUMENT)
    await sleep(1)
    await bot.send_document(chat_id=message.chat.id, document=fail)
    if path.isfile(pth):
        remove(pth)


# ================================================================================================
def register_admin_handlers(dp: Dispatcher) -> None:
    dp.register_message_handler(help_admin, commands=['help_admin'])
    dp.register_message_handler(change_notification_time, commands=['change_time'])
    dp.register_message_handler(set_notification_time, state=FsmAdmin.get_new_notification_time)
    dp.register_message_handler(fire_admin, commands=['fire_admin'])
    dp.register_message_handler(set_fire_admin, state=FsmAdmin.fire_admin_state)
    dp.register_message_handler(change_password, commands=['change_password'])
    dp.register_message_handler(set_new_password, state=FsmAdmin.change_password_state)
    dp.register_message_handler(get_admin_list, commands=['admin_list'])
    dp.register_message_handler(set_file, commands=['add_db'])
    dp.register_message_handler(save_file, state=FsmAdmin.get_file_state, content_types=['document'])
    dp.register_message_handler(if_not_document, state=FsmAdmin.get_file_state,
                                content_types=['text', 'photo', 'sticker', 'video'])
    dp.register_message_handler(get_file, commands=['get_db'])
    dp.register_message_handler(add_notification, commands=['add_note'])
    dp.register_message_handler(add_employee_id, state=FsmAdmin.add_employee_id_state)
    dp.register_message_handler(add_date, state=FsmAdmin.add_date_state)
    dp.register_message_handler(add_text, state=FsmAdmin.add_note_state)
    dp.register_callback_query_handler(continue_call, Text(equals='continue'), state='*')
    dp.register_callback_query_handler(save_call, Text(equals='save'), state=FsmAdmin.add_note_state)
