import asyncio
import logging
from datetime import date

from aiogram import types
from sqlite3 import IntegrityError
from aiogram.dispatcher import FSMContext, Dispatcher

import db
from create_bot import bot
from keyboards import inline_cancel_keyboard
from classes import FSM_user
from hendlers.box import config, message_id_dict
from hendlers.box import start_message_generator, admin_message_generator
from hendlers.box import cleaner, send_notifications


from_start = False
# ==========================–°—Ç–∞—Ä—Ç==================================================
async def start(message: types.Message, state: FSMContext) -> None:
    """
    –•–µ–Ω–¥–µ–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
    """
    try:
        db.add_user(message)
        logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
        message_id_dict[message.from_user.id] = list()
    except IntegrityError:
        logging.error(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
        return
    finally:
        await message.answer(start_message_generator(message.from_user.first_name),
                             parse_mode=types.ParseMode.HTML)

    await state.set_state(FSM_user.get_employee_id_state.state)

    global from_start
    from_start = True


# ==========================–•–µ–ª–ø==================================================
async def help_user(message: types.Message) -> None:
    """
    –•–µ–Ω–¥–µ–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help
    """
    await message.answer(start_message_generator(message.from_user.first_name, start=False),
                         parse_mode=types.ParseMode.HTML)


# ==========================–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞==================================================
async def get_employee_id(message: types.Message, state: FSMContext) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–º–µ–Ω—ã —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    """
    await message.answer('üñä –í–≤–µ–¥–∏—Ç–µ —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:', reply_markup=inline_cancel_keyboard)
    await state.set_state(FSM_user.get_employee_id_state.state)


async def set_employee_id(message: types.Message, state: FSMContext) -> None:
    """
    –•–µ–Ω–¥–µ–ª–µ—Ä —Å–æ—Ö—Ä–∞–Ω—è—é—â–∏–π —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    employee_id = set(db.get_employee_id_dict().keys())

    if message.text.isdigit() and len(message.text) == int(config['DEFAULT']['len_employee_id']):

        if employee_id.intersection({int(message.text)}):
            echo = await message.reply('‚ùó–î–∞–Ω–Ω—ã–π —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω‚ùó\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            message_id_dict[message.from_user.id].extend([echo.message_id, message.message_id])
            return

        db.update_employee_id(message.text, message.from_user.id)
        await message.reply(f'‚úî <b>–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:</b> <u>{message.text}</u> —Å–æ—Ö—Ä–∞–Ω–µ–Ω!',
                            parse_mode=types.ParseMode.HTML)
        message_id_dict[message.from_user.id].append(message.message_id)
        await cleaner(message)

        global from_start
        if from_start:
            from_start = False
            await asyncio.sleep(0.5)
            echo = await message.answer(f'üñä –í–≤–µ–¥–∏—Ç–µ –§–ò–û —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:')
            message_id_dict[message.from_user.id].append(echo.message_id)
            await state.set_state(FSM_user.get_full_name_state.state)
        else:
            await state.finish()

    else:
        echo = await message.reply('‚úñ –¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
        message_id_dict[message.from_user.id].extend([echo.message_id, message.message_id])


# ==========================–ò–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û==================================================
async def get_full_name(message: types.Message, state: FSMContext) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–º–µ–Ω—ã –§–ò–û
    """
    await message.answer('üñä –í–≤–µ–¥–∏—Ç–µ –§–ò–û —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:', reply_markup=inline_cancel_keyboard)
    await state.set_state(FSM_user.get_full_name_state.state)


async def set_full_name(message: types.Message, state: FSMContext) -> None:
    """
    –•–µ–Ω–¥–µ–ª–µ—Ä —Å–æ—Ö—Ä–∞–Ω—è—é—â–∏–π —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    message_id_dict[message.from_user.id].append(message.message_id)
    full_name = message.text.split()
    if all(map(str.isalpha, full_name)) and len(full_name) == 3:
        full_name = ' '.join(map(str.capitalize, full_name))
        db.update_name(full_name, message.from_user.id)
        await message.reply(f'‚úî <b>–§–ò–û:</b> <u>{full_name}</u> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!',
                            parse_mode=types.ParseMode.HTML)
        await cleaner(message)
        await state.finish()
    else:
        echo = await message.reply('‚úñ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
        message_id_dict[message.from_user.id].append(echo.message_id)


# ==========================–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞==================================================
async def get_admin(message: types.Message, state: FSMContext) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    await message.answer('üîê –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:',
                         reply_markup=inline_cancel_keyboard)
    await state.set_state(FSM_user.get_admin_state.state)


async def set_admin(message: types.Message, state: FSMContext) -> None:
    """
    –•–µ–Ω–¥–µ–ª–µ—Ä —Å–æ—Ö—Ä–∞–Ω—è—é—â–∏–π —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –≤–≤–æ–¥–µ –ø–∞—Ä–æ–ª—è
    """
    if message.text == config['topsecret']['admin_password']:
        db.add_admin(message.from_user.id)
        await message.answer(admin_message_generator(),
                             parse_mode=types.ParseMode.HTML)
        message_id_dict[message.from_user.id].append(message.message_id)
        await cleaner(message)
        await state.finish()
    else:
        echo = await message.answer('üîí –ü–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
        await bot.delete_message(message.chat.id, message.message_id)
        message_id_dict[message.from_user.id].append(echo.message_id)


# ==========================–ó–∞–ø—Ä–æ—Å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è==================================================
async def notification(message: types.Message) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –ë–î
    """
    current_date = date.today()
    user_id = message.from_user.id
    employee_id = db.get_user_by_id(user_id).employee_id
    state = await send_notifications(current_date, user_id, employee_id)
    if not state:
        await message.answer('–£–ø—Å...\n–ö–∞–∂–µ—Ç—Å—è –ø—É—Å—Ç–æ ü•∫.')


def register_user_handlers(dp: Dispatcher) -> None:
    dp.register_message_handler(start, commands=['start'])
    dp.register_message_handler(help_user, commands=['help'])
    dp.register_message_handler(get_employee_id, commands=['change_id'])
    dp.register_message_handler(set_employee_id, state=FSM_user.get_employee_id_state)
    dp.register_message_handler(get_full_name, commands=['change_name'])
    dp.register_message_handler(set_full_name, state=FSM_user.get_full_name_state)
    dp.register_message_handler(get_admin, commands=['get_admin'])
    dp.register_message_handler(set_admin, state=FSM_user.get_admin_state)
    dp.register_message_handler(notification, commands=['notifications'])
