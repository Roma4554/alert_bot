import datetime
import logging

from configobj import ConfigObj
from aiogram import types
from asyncio import sleep, current_task
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext, Dispatcher
from aiogram.utils.exceptions import BotBlocked
from datetime import time, date, timedelta, datetime

import db
from create_bot import bot

config = ConfigObj('settings.ini')

message_id_dict = dict()
notification_dict = dict()


# ==========================–û—Ç–º–µ–Ω–∞ (–∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞)==================================================
async def cancel_call(callback: types.CallbackQuery, state: FSMContext) -> None:
    """
    –•–µ–Ω–¥–µ–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ "–æ—Ç–º–µ–Ω–∞". –ü—Ä–µ—Ä—ã–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
    """
    cur_state = await state.get_state()
    if cur_state is None:
        return
    await state.finish()
    await callback.message.reply('–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')
    await cleaner(callback)
    await callback.answer()


# ==========================–§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞============================
async def cleaner(call: types.Message | types.CallbackQuery) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª—è—é—â–∞—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ —Å–ª–æ–≤–∞—Ä—è message_id_dict –∏ –æ—Ç—á–∏—â–∞—é—â–∞—è —Å–ø–∏—Å–æ–∫
    """
    user_id = call.from_user.id

    if isinstance(call, types.Message):
        chat_id = call.chat.id
    elif isinstance(call, types.CallbackQuery):
        chat_id = call.message.chat.id
    else:
        raise TypeError('call –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Message –∏–ª–∏ CallbackQuery')

    try:
        if message_id_dict[user_id]:
            for message_id in message_id_dict[user_id][::-1]:
                await bot.delete_message(chat_id, message_id)

            message_id_dict[user_id].clear()
    except KeyError:
        pass


# ===========================–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è id —Å–æ–æ–±—â–µ–Ω–∏–π ======================
def create_message_id_list() -> None:
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞—é—â–∞—è –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–æ–≤–∞—Ä–µ message_id_dict
    """
    for user in db.get_user_list():
        message_id_dict[user.user_id] = []


# ==========================–†–∞—Å—Å—ã–ª–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è=================================================
async def send_notifications(current_date: datetime.date, user_id: int, employee_id: int) -> bool:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    pattern_message = '‚ñ´[{data}]: {text}'
    notifications = db.get_notifications(current_date.strftime("%Y.%m.%d"), employee_id)
    if notifications:
        text_message = ('‚ùó<b>–í–Ω–∏–º–∞–Ω–∏–µ</b>‚ùó').center(39, '=')
        for notification in notifications:
            time_delta = notification.date_to_datetime() - current_date
            if time_delta.days in range(int(config['DEFAULT']['delta_days']) + 1):
                text_message = '\n'.join([text_message, pattern_message.format(data=notification.convert_date(),
                                                                               text=notification.notification)])
        await try_send_message(user_id, text_message)
        return True
    else:
        return False


async def try_send_message(user_id: int, text_message: str) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    try:
        await bot.send_message(user_id, text_message, parse_mode=types.ParseMode.HTML)
    except BotBlocked as ex:
        logging.error(f'{ex}. User id: {user_id}')


async def auto_alert() -> None:
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    """
    logging.info('–í–∫–ª—é—á–µ–Ω–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    while True:
        id_dict = db.get_employee_id_dict()
        current_date = date.today()

        current_datetime = datetime.now()
        notification_time = time.fromisoformat(config['DEFAULT']['notification_time'])
        notification_datetime = datetime.combine(current_date, notification_time)

        if notification_datetime > current_datetime:
            notification_datetime += timedelta(days=1)

        delta_time = notification_datetime - current_datetime

        logging.info(f'–°–ª–µ–¥—É—é—â–µ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {int(delta_time.seconds / 60)} –º–∏–Ω.')

        await sleep(delta_time.seconds)

        if current_task().cancelled():
            break
        else:
            for employee_id in id_dict:
                user_id = id_dict[employee_id]
                await send_notifications(current_date, user_id, employee_id)

            await sleep(5)


# ==========================–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è============================
def start_message_generator(name: str, start: bool = True) -> str:
    helper_user_message = {
        '/help': '–≤—ã–∑–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥',
        '/change_id': '–∏–∑–º–µ–Ω–∏—Ç—å —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä',
        '/change_name': '–∏–∑–º–µ–Ω–∏—Ç—å –§–ò–û',
        '/notifications': '–∑–∞–ø—Ä–æ—Å–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
    }

    text_message = f'–ü—Ä–∏–≤–µ—Ç, {name} üëã!\
                    \n–Ø –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ —Å–¥–∞—á–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤!\n\
                    \n‚öô –¢—ã –º–æ–∂–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–æ–π —Å –ø–æ–º–æ—â—å—é —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥:\n'

    for command, description in helper_user_message.items():
        text_message = '\n'.join([text_message, f'{command} - {description}'])

    if start:
        text_message += '\n\n<b>–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–π —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:</b>'

    return text_message


# ==========================–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è help_admin============================
def admin_message_generator() -> str:
    helper_admin_message = {
        '/help_admin': '–≤—ã–∑–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏',
        '/change_time': '–∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏',
        '/change_password': '–∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å',
        '/admin_list': '–ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤',
        '/fire_admin': '–ª–∏—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
        '/add_note': '–¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö',
        '/add_db': '–¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ xlsx —Ç–∞–±–ª–∏—Ü—ã (*d –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Ñ–∞–π–ª—É –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ '
                   '–æ—Ç—á–∏—Å—Ç–∏—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)',
        '/get_db': '–ø–æ–ª—É—á–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –≤–∏–¥–µ xlsx —Ç–∞–±–ª–∏—Ü—ã',
    }

    text_message = f'<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! üîì</b>\n'

    for command, description in helper_admin_message.items():
        text_message = '\n'.join([text_message, f'{command} - {description}'])

    return text_message


# ==========================–ü–æ–∏—Å–∫ employee_id –ø–æ –∏–Ω–∏—Ü–∏–∞–ª–∞–º============================
async def search_by_initials(message: types.Message) -> int:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –ø–æ –∏–Ω–∏—Ü–∏–∞–ª–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if not message.text.isdigit():

        initial_dict = {user.get_initials().lower(): user.employee_id for user in db.get_user_list()}

        text = message.text.strip().replace('. ', '.').lower()
        text = text[:-1:] if text.endswith('.') else text

        for initials in initial_dict:
            if text == initials:
                employee_id = initial_dict[text]
                break
        else:
            echo = await message.reply('–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ!')
            message_id_dict[message.from_user.id].extend([message.message_id, echo.message_id])
    else:
        employee_id = message.text

    return employee_id


def register_handlers(dp: Dispatcher) -> None:
    dp.register_callback_query_handler(cancel_call, Text(equals='cancel'), state='*')
