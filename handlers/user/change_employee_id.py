import asyncio

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import Message

import db
from keyboards import inline_cancel_keyboard
from classes import FsmUser
from utility.cleaner import message_id_dict, cleaner, config


async def get_employee_id(message: types.Message, state: FSMContext) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–º–µ–Ω—ã —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    """
    await message.answer('üñä –í–≤–µ–¥–∏—Ç–µ —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:', reply_markup=inline_cancel_keyboard)
    await state.set_state(FsmUser.get_employee_id_state.state)


async def set_employee_id(message: types.Message, state: FSMContext) -> None:
    """
    –•–µ–Ω–¥–µ–ª–µ—Ä —Å–æ—Ö—Ä–∞–Ω—è—é—â–∏–π —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    employee_id = set(db.get_employee_id_dict().keys())

    if message.text.isdigit() and len(message.text) == int(config['DEFAULT']['len_employee_id']):

        if employee_id.intersection({message.text}):
            echo = await message.reply('‚ùó–î–∞–Ω–Ω—ã–π —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω‚ùó\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            message_id_dict[message.from_user.id].extend([echo.message_id, message.message_id])
            return

        db.update_employee_id(message.text, message.from_user.id)
        await message.reply(f'‚úî <b>–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:</b> <u>{message.text}</u> —Å–æ—Ö—Ä–∞–Ω–µ–Ω!',
                            parse_mode=types.ParseMode.HTML)
        message_id_dict[message.from_user.id].append(message.message_id)
        await cleaner(message)

        current_state = await state.get_state()
        if current_state == 'FsmUser:get_employee_id_from_start_state':
            await asyncio.sleep(0.5)
            echo: Message = await message.answer(f'üñä –í–≤–µ–¥–∏—Ç–µ –§–ò–û —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:')
            message_id_dict[message.from_user.id].append(echo.message_id)
            await state.set_state(FsmUser.get_full_name_state.state)
        else:
            await state.finish()

    else:
        echo = await message.reply('‚úñ –¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
        message_id_dict[message.from_user.id].extend([echo.message_id, message.message_id])
