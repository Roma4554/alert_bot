from aiogram import types
from aiogram.dispatcher import FSMContext

import db
from keyboards import inline_cancel_keyboard
from classes import FsmUser
from utility.cleaner import message_id_dict, cleaner




async def get_full_name(message: types.Message, state: FSMContext) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–º–µ–Ω—ã –§–ò–û
    """
    await message.answer('üñä –í–≤–µ–¥–∏—Ç–µ –§–ò–û —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:', reply_markup=inline_cancel_keyboard)
    await state.set_state(FsmUser.get_full_name_state.state)


async def set_full_name(message: types.Message, state: FSMContext) -> None:
    """
    –•–µ–Ω–¥–µ–ª–µ—Ä —Å–æ—Ö—Ä–∞–Ω—è—é—â–∏–π —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    message_id_dict[message.from_user.id].append(message.message_id)
    full_name = message.text.split()
    if all(map(str.isalpha, full_name)) and len(full_name) == 3:
        full_name = ' '.join(map(str.capitalize, full_name))
        db.update_name(full_name, message.from_user.id)
        await message.reply(f'‚úî <b>–§–ò–û:</b> <u>{full_name}</u> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!',
                            parse_mode=types.ParseMode.HTML)
        await cleaner(message)
        await state.finish()
    else:
        echo = await message.reply('‚úñ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
        message_id_dict[message.from_user.id].append(echo.message_id)