from re import search

from aiogram import types
from aiogram.dispatcher import FSMContext

import db
from create_bot import bot
from utility.decorators import check_permission
from classes import FsmAdmin, Notification
from utility.cleaner import cleaner, message_id_dict, notification_dict
from utility import search_employee_id
from keyboards import inline_cancel_keyboard, inline_save_notification_keyboard, inline_next_keyboard


time_pattern = r'([01]\d|2[0-3]):[0-5]\d(:[0-5]\d)?$'
date_pattern = r'^(?:0[1-9]|[12]\d|3[01])\.(?:0[1-9]|1[012])\.(?:[12]\d{3})$'
password_pattern = r'^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?!.*[\s#`~"\'\.\+\-\\\/\*$%‚Ññ@;:^&\*\=]).*$'


@check_permission
async def add_notification(message: types.Message, state: FSMContext) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    await message.reply('–í–≤–µ–¥–∏—Ç–µ <b>—Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –µ–≥–æ <b>–∏–Ω–∏—Ü–∏–∞–ª—ã</b> (–ò–≤–∞–Ω–æ–≤ –ò.–ò):',
                        reply_markup=inline_cancel_keyboard,
                        parse_mode=types.ParseMode.HTML)

    notification_dict[message.from_user.id] = list()
    await state.set_state(FsmAdmin.add_employee_id_state.state)


async def add_employee_id(message: types.Message, state: FSMContext) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä —Å–æ—Ö—Ä–∞–Ω—è—é—â–∏–π —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—â–∏–π –¥–∞—Ç—É –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:
    """
    if message.text.lower() == 'all':
        employees_id = db.get_employee_id_dict().keys()

        for employee_id in employees_id:
            set_notification_in_notification_dict(message, employee_id, check=False)

        echo = await message.reply('–î–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"</b>',
                                   reply_markup=inline_next_keyboard,
                                   parse_mode=types.ParseMode.HTML)
        message_id_dict[message.from_user.id].extend([message.message_id, echo.message_id])
        await state.finish()
        return

    try:
        employee_id = search_employee_id(message)
        set_notification_in_notification_dict(message, employee_id)
        echo = await message.reply('–î–æ–±–∞–≤—å—Ç–µ –µ—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"</b>',
                                   reply_markup=inline_next_keyboard,
                                   parse_mode=types.ParseMode.HTML)
    except (KeyError, ValueError) as ex:
        argument = ex.args
        echo = await message.reply(*argument)
    finally:
        message_id_dict[message.from_user.id].extend([message.message_id, echo.message_id])


def set_notification_in_notification_dict(message: types.Message, employee_id: str, check: bool = True) -> None:
    if check:
        note = {note.employee_id for note in notification_dict[message.from_user.id]}
        if employee_id in note:
            raise KeyError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫')
    notification = Notification()
    notification.employee_id = employee_id
    notification_dict[message.from_user.id].append(notification)


async def continue_call(callback: types.CallbackQuery, state: FSMContext) -> None:
    """
    –•–µ–Ω–¥–µ–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å".
    """
    if notification_dict.get(callback.from_user.id) is None:
        return

    await state.set_state(FsmAdmin.add_date_state.state)
    echo = await callback.message.reply('üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:',
                                        reply_markup=inline_cancel_keyboard,
                                        parse_mode=types.ParseMode.HTML)
    message_id_dict[callback.from_user.id].append(echo.message_id)


async def add_date(message: types.Message, state: FSMContext) -> None:
    """
    –•–µ–Ω–¥–µ–ª–µ—Ä —Å–æ—Ö—Ä–∞–Ω—è—é—â–∏–π –¥–∞—Ç—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—â–∏–π —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    """
    if search(date_pattern, message.text):
        split_text = message.text.split('.')[::-1]
        date = '.'.join(split_text)
        for note in notification_dict[message.from_user.id]:
            note.date = date
        await state.set_state(FsmAdmin.add_note_state.state)
        echo = await message.reply('üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:',
                                   reply_markup=inline_cancel_keyboard,
                                   parse_mode=types.ParseMode.HTML)
    else:
        echo = await message.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:')

    message_id_dict[message.from_user.id].extend([echo.message_id, message.message_id])


async def add_text(message: types.Message) -> None:
    """
    –•–µ–Ω–¥–µ–ª–µ—Ä –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    """
    notifications = notification_dict[message.from_user.id]
    for notification in notifications:
        notification.notification = message.html_text
    text_message = '–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç, –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!' \
                   '\n–î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–π –≤–µ—Ä—Å–∏–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"</b>\n' \
                   '\n<b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:</b>'
    text_message = '\n'.join([text_message, str(notifications[0])])
    message_id_dict[message.from_user.id].append(message.message_id)
    await cleaner(message)
    echo = await message.answer(text_message,
                                reply_markup=inline_save_notification_keyboard,
                                parse_mode=types.ParseMode.HTML)
    message_id_dict[message.from_user.id].append(echo.message_id)

async def save_call(callback: types.CallbackQuery, state: FSMContext) -> None:
    """
    –•–µ–Ω–¥–µ–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å".
    """
    await state.finish()
    notifications = map(tuple, notification_dict[callback.from_user.id])
    db.add_info_to_notification(notifications)
    await bot.edit_message_text(chat_id=callback.message.chat.id,
                                message_id=message_id_dict[callback.from_user.id].pop(),
                                parse_mode=types.ParseMode.HTML,
                                text='‚úî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>')